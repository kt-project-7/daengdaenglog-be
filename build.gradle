plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.clover'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

bootJar.enabled = false

repositories {
	mavenCentral()
}

subprojects { // 모든 하위 모듈들에 이 설정을 적용합니다.
	group 'com.clover'
	version '0.0.1-SNAPSHOT'
	sourceCompatibility = '17'

	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
	}

	ext {
		set('springCloudVersion', "2024.0.1")
	}

	dependencyManagement {
		imports {
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
	}


	repositories {
		mavenCentral()
	}

	dependencies { // 모든 하위 모듈에 추가 될 의존성 목록입니다.
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		compileOnly 'org.projectlombok:lombok'
		developmentOnly 'org.springframework.boot:spring-boot-devtools'
		runtimeOnly 'org.postgresql:postgresql'
		annotationProcessor 'org.projectlombok:lombok'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

		//h2
		runtimeOnly 'com.h2database:h2'

		//kafka
		implementation 'org.springframework.kafka:spring-kafka'
		testImplementation 'org.springframework.kafka:spring-kafka-test'

		//swagger
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

		//openfeign
		implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

		//QueryDsl
		implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
		implementation "com.querydsl:querydsl-sql-spatial:${dependencyManagement.importedProperties['querydsl.version']}"
		annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
		annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
		annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

		//kubernetes service discovery
		implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes-fabric8'
		implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
	}

	test {
		useJUnitPlatform()
	}

	//Querydsl 설정
	def generated = 'src/main/generated'

	//querydsl QClass 파일 생성 위치를 지정
	tasks.withType(JavaCompile).configureEach {
		options.getGeneratedSourceOutputDirectory().set(file(generated))
	}

	//java source set 에 querydsl QClass 위치 추가
	sourceSets {
		main.java.srcDirs += [generated]
	}

	//자동 생성된 Q클래스 gradle clean으로 제거
	clean {
		delete file(generated)
	}
}