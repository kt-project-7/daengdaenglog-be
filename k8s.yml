##################################################################################################
# Zookeeper Deployment
##################################################################################################
apiVersion: v1
kind: Service
metadata:
  labels:
    app: zookeeper-service
  name: zookeeper-service
spec:
  type: NodePort
  ports:
    - name: zookeeper-port
      port: 2181
      nodePort: 30181
      targetPort: 2181
  selector:
    app: zookeeper
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: zookeeper
  name: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - image: wurstmeister/zookeeper
          imagePullPolicy: IfNotPresent
          name: zookeeper
          ports:
            - containerPort: 2181
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka-service
  name: kafka-service
spec:
  ports:
    - name: kafka-port
      port: 9092
      protocol: TCP
      targetPort: 9092
  selector:
    app: kafka-service
  clusterIP: None
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka-service
  name: kafka-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-service
  template:
    metadata:
      labels:
        app: kafka-service
    spec:
      containers:
        - env:
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: zookeeper-service:2181
            - name: KAFKA_LISTENERS
              value: LISTENER_INTERNAL://kafka-service:9092,LISTENER_EXTERNAL://localhost:9093
            - name: KAFKA_ADVERTISED_LISTENERS
              value: LISTENER_INTERNAL://kafka-service:9092,LISTENER_EXTERNAL://localhost:9093
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: LISTENER_INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: LISTENER_INTERNAL
          image: wurstmeister/kafka
          imagePullPolicy: IfNotPresent
          name: kafka-service
          ports:
            - containerPort: 9092
---
##################################################################################################
# PostgreSQL
##################################################################################################
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:latest
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: clover
            - name: POSTGRES_PASSWORD
              value: cloverpass
            - name: POSTGRES_DB
              value: cloverdb
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
      volumes:
        - name: postgres-storage
          emptyDir: {}

---
##################################################################################################
# Application Services
##################################################################################################
# admin-service
apiVersion: v1
kind: Service
metadata:
  name: admin-service
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: admin-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-service-deployment
  labels:
    app: admin-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admin-service
  template:
    metadata:
      labels:
        app: admin-service
    spec:
      initContainers:
        - name: wait-for-kafka
          image: busybox
          command: ['sh', '-c', 'until nc -z kafka-service 9092; do echo waiting for kafka...; sleep 2; done']
        - name: wait-for-postgres
          image: busybox
          command: ['sh', '-c', 'until nc -z postgres 5432; do echo waiting for postgres...; sleep 2; done']
      containers:
        - name: admin-service
          image: leedy3838/admin-service:dev
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: kafka:9092

---
# auth-service
apiVersion: v1
kind: Service
metadata:
  name: auth-service
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: auth-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service-deployment
  labels:
    app: auth-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
    spec:
      initContainers:
        - name: wait-for-kafka
          image: busybox
          command: ['sh', '-c', 'until nc -z kafka-service 9092; do echo waiting for kafka...; sleep 2; done']
        - name: wait-for-postgres
          image: busybox
          command: ['sh', '-c', 'until nc -z postgres 5432; do echo waiting for postgres...; sleep 2; done']
      containers:
        - name: auth-service
          image: leedy3838/auth-service:dev
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: kafka:9092

---

# diary-service
apiVersion: v1
kind: Service
metadata:
  name: diary-service
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: diary-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: diary-service-deployment
  labels:
    app: diary-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: diary-service
  template:
    metadata:
      labels:
        app: diary-service
    spec:
      initContainers:
        - name: wait-for-kafka
          image: busybox
          command: ['sh', '-c', 'until nc -z kafka-service 9092; do echo waiting for kafka...; sleep 2; done']
        - name: wait-for-postgres
          image: busybox
          command: ['sh', '-c', 'until nc -z postgres 5432; do echo waiting for postgres...; sleep 2; done']
      containers:
        - name: diary-service
          image: leedy3838/diary-service:dev
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: kafka:9092

---

# guide-service
apiVersion: v1
kind: Service
metadata:
  name: guide-service
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: guide-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: guide-service-deployment
  labels:
    app: guide-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: guide-service
  template:
    metadata:
      labels:
        app: guide-service
    spec:
      initContainers:
        - name: wait-for-kafka
          image: busybox
          command: ['sh', '-c', 'until nc -z kafka-service 9092; do echo waiting for kafka...; sleep 2; done']
        - name: wait-for-postgres
          image: busybox
          command: ['sh', '-c', 'until nc -z postgres 5432; do echo waiting for postgres...; sleep 2; done']
      containers:
        - name: guide-service
          image: leedy3838/guide-service:dev
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: kafka:9092

---

# letter-service
apiVersion: v1
kind: Service
metadata:
  name: letter-service
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: letter-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: letter-service-deployment
  labels:
    app: letter-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: letter-service
  template:
    metadata:
      labels:
        app: letter-service
    spec:
      initContainers:
        - name: wait-for-kafka
          image: busybox
          command: ['sh', '-c', 'until nc -z kafka-service 9092; do echo waiting for kafka...; sleep 2; done']
        - name: wait-for-postgres
          image: busybox
          command: ['sh', '-c', 'until nc -z postgres 5432; do echo waiting for postgres...; sleep 2; done']
      containers:
        - name: letter-service
          image: leedy3838/letter-service:dev
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: kafka:9092

---

# memory-service
apiVersion: v1
kind: Service
metadata:
  name: memory-service
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: memory-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: memory-service-deployment
  labels:
    app: memory-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: memory-service
  template:
    metadata:
      labels:
        app: memory-service
    spec:
      initContainers:
        - name: wait-for-kafka
          image: busybox
          command: ['sh', '-c', 'until nc -z kafka-service 9092; do echo waiting for kafka...; sleep 2; done']
        - name: wait-for-postgres
          image: busybox
          command: ['sh', '-c', 'until nc -z postgres 5432; do echo waiting for postgres...; sleep 2; done']
      containers:
        - name: memory-service
          image: leedy3838/memory-service:dev
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: kafka:9092

---
# pet-service
apiVersion: v1
kind: Service
metadata:
  name: pet-service
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: pet-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pet-service-deployment
  labels:
    app: pet-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pet-service
  template:
    metadata:
      labels:
        app: pet-service
    spec:
      initContainers:
        - name: wait-for-kafka
          image: busybox
          command: ['sh', '-c', 'until nc -z kafka-service 9092; do echo waiting for kafka...; sleep 2; done']
        - name: wait-for-postgres
          image: busybox
          command: ['sh', '-c', 'until nc -z postgres 5432; do echo waiting for postgres...; sleep 2; done']
      containers:
        - name: pet-service
          image: leedy3838/pet-service:dev
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: kafka:9092

---

# gateway-service
apiVersion: v1
kind: Service
metadata:
  name: gateway-service
spec:
  ports:
    - port: 8080
      targetPort: 8080
  selector:
    app: gateway-service
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-service-deployment
  labels:
    app: gateway-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway-service
  template:
    metadata:
      labels:
        app: gateway-service
    spec:
      containers:
        - name: gateway-service
          image: leedy3838/gateway-service:dev
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: kafka:9092

# minikube start
# kubectl apply -f k8s.yml
# kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml --validate=false
# 이후 sudo minikube tunnel 명령어로 localhost 접속 가능

# 해당 포트로 서비스 연결
# kubectl port-forward service/guide-service 8081:8080

# 이미지 바꼈을 때 최신화
# kubectl rollout restart deployment auth-service-deployment